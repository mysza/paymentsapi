// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "github.com/mysza/paymentsapi/domain"
import mock "github.com/stretchr/testify/mock"

// PaymentsRepository is an autogenerated mock type for the PaymentsRepository type
type PaymentsRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *PaymentsRepository) Add(_a0 *domain.Payment) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*domain.Payment) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *PaymentsRepository) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: _a0
func (_m *PaymentsRepository) Exists(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *PaymentsRepository) Get(_a0 string) (*domain.Payment, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Payment
	if rf, ok := ret.Get(0).(func(string) *domain.Payment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PaymentsRepository) GetAll() ([]*domain.Payment, error) {
	ret := _m.Called()

	var r0 []*domain.Payment
	if rf, ok := ret.Get(0).(func() []*domain.Payment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *PaymentsRepository) Update(_a0 *domain.Payment) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Payment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
